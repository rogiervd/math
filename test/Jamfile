import testing ;

project
    : requirements
    <library>/boost/test//boost_unit_test_framework
    <library>/math//math
    <warnings-as-errors>on
    <c++-template-depth>1024
    # The line above does not seem to have any effect on a newer Boost,
    # so be explicit:
    <toolset>clang:<cxxflags>"-ftemplate-depth-1024"

## Note on optimisations through GCC command line settings.
## Most of these settings turn out to only make the baseline "a+b" worse.
## I got confused by this for a bit.
# This causes errors:
#      <toolset>gcc:<cxxflags>"-ffast-math"
# This causes only errors in the handling of signed zeros:
#      <toolset>gcc:<cxxflags>"-fassociative-math -fno-signed-zeros -fno-trapping-math"
# It may still be useful to make sure the tests work well under
# "-fno-signed-zeros".

# -ffinite-math-only actually does make things faster, but this is not something
# we want.
# I think.
# We need to use -inf as 0.
#      <toolset>gcc:<cxxflags>"-ffinite-math-only"

    # It is useful to switch on some form of memory checking for the tests.
    # Here are some options, commented out.

    # 1) Use Valgrind, which then must be installed on the computer.
    # This uses Valgrind's MemCheck tool.
#      <testing.launcher>"valgrind --leak-check=full --error-exitcode=1"

    # 2) Switch on Address Sanitizer.
    # It is available in LLVM from version 3.1.
#      <toolset>clang:<cxxflags>-fsanitize=address
#      <toolset>clang:<linkflags>-fsanitize=address
    # It is available in GCC from version 4.8.
#      <toolset>gcc:<cxxflags>-fsanitize=address
#      <toolset>gcc:<linkflags>-fsanitize=address

    ;

alias "math-tests" : math ;

